# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v7AwFa6nhHQDCCCiz_gOorg0_R4NY9rV
"""

import streamlit as st
import joblib
import numpy as np

# Load the saved model, scaler, and label encoder
model = joblib.load('telco_churn_model.pkl')
scaler = joblib.load('scaler.pkl')
label_encoder = joblib.load('label_encoder.pkl')

# Streamlit app
st.title("Telco Churn Prediction")

# Input fields
st.header("Enter Customer Details")
tenure = st.number_input("Tenure (months)", min_value=0, max_value=100, value=1)
monthly_charges = st.number_input("Monthly Charges ($)", min_value=0.0, max_value=200.0, value=50.0)
total_charges = st.number_input("Total Charges ($)", min_value=0.0, max_value=10000.0, value=1000.0)
internet_service = st.selectbox("Internet Service", ["No", "Fiber Optic"])
contract = st.selectbox("Contract", ["Month-to-Month", "One Year", "Two Year"])

# Convert categorical inputs to numerical values
internet_service_mapping = {"No": 0, "Fiber Optic": 1}
contract_mapping = {"Month-to-Month": 0, "One Year": 1, "Two Year": 2}

internet_service_encoded = internet_service_mapping[internet_service]
contract_encoded = contract_mapping[contract]

# Predict button
if st.button("Predict Churn"):
    # Prepare input data
    input_data = np.array([[
        tenure,
        monthly_charges,
        total_charges,
        internet_service_encoded,
        contract_encoded
    ]])

    # Scale the input data
    input_data_scaled = scaler.transform(input_data)

    # Make prediction
    prediction = model.predict(input_data_scaled)
    prediction_label = label_encoder.inverse_transform(prediction)

    # Display the result
    if prediction_label[0] == "Yes":
        st.error("Prediction: This customer is likely to churn.")
    else:
        st.success("Prediction: This customer is not likely to churn.")